
==================== FINAL INTERFACE ====================
2019-12-19 11:10:48.5461582 UTC

interface main:Main 8065
  interface hash: d021ba364cf4d3f8a8b990f905ac5a7b
  ABI hash: 4c27efbd5f3e5f9a98824bd7e77377f8
  export-list hash: fe77e6eb720c62667da570a9d1acb9d1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 546bfdd8cc45a07af2f67fff452d56b6
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.handleInput
  Main.main
  Main.parseInput
  Main.printTable
module dependencies: DataTypes NetworkFunctions
package dependencies: array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0 network-2.8.0.1
                      stm-2.5.0.0 text-1.2.3.1 unordered-containers-0.2.10.0
orphans: stm-2.5.0.0:Control.Monad.STM
         network-2.8.0.1:Network.Socket
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
import  -/  base-4.12.0.0:Control.Concurrent db627a2e14aa77645810b5e18852cc54
import  -/  base-4.12.0.0:Control.Exception 68d632685955b01899aa782b05b79cdf
import  -/  base-4.12.0.0:Control.Monad 54356f938d3817a0115f506fce4f2fa3
import  -/  base-4.12.0.0:Data.Foldable bdeac546b12282c8986759606b9295a5
import  -/  base-4.12.0.0:Data.IORef 9fe6be300ad920563b6d0585952c3155
import  -/  base-4.12.0.0:Data.List 6c60559263db7cf0f22549b9673785b9
import  -/  base-4.12.0.0:Data.OldList 9c79c2259344fa5285ac49797d9c5db1
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Conc.Sync fae6c83841bcf1584e2587725f53d9ce
import  -/  base-4.12.0.0:GHC.IO.Handle 5b3f689b082eee6e7562e9b58323b91a
import  -/  base-4.12.0.0:GHC.IO.Handle.FD 5b13f4cf43b26c3d52e20458852a8546
import  -/  base-4.12.0.0:GHC.IO.Handle.Text 2ca19f0c4c6b23c3ad9d1464d36c5281
import  -/  base-4.12.0.0:GHC.IO.Handle.Types b0667350495b7969f4b13a8e9686d1b4
import  -/  base-4.12.0.0:GHC.IORef 08be4ed51bab2548b874b071705c05a2
import  -/  base-4.12.0.0:GHC.List bb56c56a8dc21963b5824914872db158
import  -/  base-4.12.0.0:GHC.Show fa6032f3f820e8e8ec87b97bdca4e160
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Environment 045df705c1f205b31d24a0f6340ea2db
import  -/  base-4.12.0.0:System.IO 51ffc52e2e8495d5c7b596557cf2be89
import  -/  base-4.12.0.0:Text.Read 580457154dc9d710b792a13b428d58dd
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  DataTypes ea44efec5024321692dbf6588e9ef1c6
  exports: 6f4e5eb89d776ab7e359de84ce58688f
  Local 8b6152630e09a63878181823d2c5d543
  Lock c0d1d948e3b03977e141e8626010c1b0
  Node cc2a5c9b30ebf4d0401f733c49f05f26
  Port 352e18570b51b10ff1762f7515540820
  Portnumber fa6fd06ebfa214c388b4a31bcf9a9744
  Udef 9528484777bb447e18d40bbb4046bb1d
  allNodes cc2a5c9b30ebf4d0401f733c49f05f26
  estDist cc2a5c9b30ebf4d0401f733c49f05f26
  estDistNeigh cc2a5c9b30ebf4d0401f733c49f05f26
  getLock f61b0d144bd2c6d3417db008aae0114d
  interlocked 1236afa38e4671a8ee8b0d793b90d786
  makeNode b6c31deac071afd18c85f10477f91655
  me cc2a5c9b30ebf4d0401f733c49f05f26
  neighConnection cc2a5c9b30ebf4d0401f733c49f05f26
  neighbours cc2a5c9b30ebf4d0401f733c49f05f26
  routingTable cc2a5c9b30ebf4d0401f733c49f05f26
import  -/  NetworkFunctions 1b55c7daa29a4d6607adfed0d2e7241d
  exports: 58963bca5f5cbd9c4836f67da3d166c2
  connectTo f5f0c4e5022435b5527527a005b7524d
  listenForConnections 28eb7fec3080f73b592d837d3a7a9bd5
  makeConnection 6670c24a812ee3843e665315f3b1a038
  makeEstDist 59656238358d1ed1d2185fe7d6d2ac81
  makeRoutingTable 8e787bafdf80db7b2e340682d0faf82a
  portToAddress 81d94d68caf0fa3c97978458d6696fae
  processDisconnect f325ec7add05b786137b6d730a48874d
  readCommandLineArguments b2c7cfb53a69ff26a5f453b66926f15c
import  -/  network-2.8.0.1:Network.Socket cccb3c178b1f8d4043b518ed5f994246
import  -/  network-2.8.0.1:Network.Socket.Types 8885d0583783d86ae72c97c90ee0757a
import  -/  stm-2.5.0.0:Control.Concurrent.STM c418f6f5d5174c7fcc2a4eb1734356a3
import  -/  unordered-containers-0.2.10.0:Data.HashMap.Base bb401e756b294adc833e9f91ee987a2e
import  -/  unordered-containers-0.2.10.0:Data.HashMap.Lazy 09ee012ce2aeb80cf8693cad08fc6338
7efe7c0cd6bead29b950e8557623d1fa
  $s!1 :: v
  {- Strictness: x -}
6b7a60e92b101bf09ee07bf0289d1afd
  $slookup#1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
2e41a6cc56e8c3dc07c0dcc00f598547
  $w$s$wupdateOrSnocWithKey ::
    (DataTypes.Port -> v -> v -> v)
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf DataTypes.Port v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf DataTypes.Port v)
  {- Arity: 4, Strictness: <L,C(C1(C1(U)))><S,U><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ @ v
                   (w :: DataTypes.Port -> v -> v -> v)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf DataTypes.Port v)) ->
                 let {
                   exit :: v
                           -> Data.HashMap.Array.Array#
                                (Data.HashMap.Base.Leaf DataTypes.Port v)
                           -> GHC.Prim.Int#
                           -> DataTypes.Port
                           -> v
                           -> Data.HashMap.Array.Array
                                (Data.HashMap.Base.Leaf DataTypes.Port v)
                     <join 5> {- Arity: 5, Strictness: <L,U><S,U><S,U><L,U><L,U> -}
                   = \ (w3 :: v)[OneShot]
                       (ww1 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf DataTypes.Port v))[OneShot]
                       (ww2 :: GHC.Prim.Int#)[OneShot]
                       (k2 :: DataTypes.Port)[OneShot]
                       (y :: v)[OneShot] ->
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.HashMap.Array.Array
                                   (Data.HashMap.Base.Leaf DataTypes.Port v) #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.thawSmallArray#
                                    @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                    @ GHC.Prim.RealWorld
                                    ww1
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                       ww1)
                                    s1 of ds2 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.writeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                    ipv5
                                    ww2
                                    (Data.HashMap.Base.L @ DataTypes.Port @ v k2 (w k2 w3 y))
                                    ipv4 of s' { DEFAULT ->
                             case GHC.Prim.unsafeFreezeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                    ipv5
                                    s' of ds3 { (#,#) ipv6 ipv7 ->
                             (# ipv6,
                                Data.HashMap.Array.Array
                                  @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                  ipv7 #) } } }) of ds2 { (#,#) ipv4 ipv5 ->
                     ipv5 }
                 } in
                 letrec {
                   $wgo1 :: GHC.Prim.Int#
                            -> v
                            -> Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf DataTypes.Port v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> Data.HashMap.Array.Array
                                 (Data.HashMap.Base.Leaf DataTypes.Port v)
                     <join 5> {- Arity: 5, Strictness: <L,U><L,U><S,U><S,U><S,U>,
                                 Inline: [2] -}
                   = \ (ww1 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww2 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf DataTypes.Port v))
                       (ww3 :: GHC.Prim.Int#)
                       (ww4 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww3 ww4 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexSmallArray#
                                 @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                 ww2
                                 ww3 of ds1 { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { GHC.Types.I# y1 ->
                          case GHC.Prim.==# ww1 y1 of lwild1 {
                            DEFAULT -> $wgo1 ww1 w3 ww2 (GHC.Prim.+# ww3 1#) ww4
                            1# -> exit w3 ww2 ww3 (GHC.Types.I# ww1) y } } } }
                       1#
                       -> case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.HashMap.Array.Array
                                        (Data.HashMap.Base.Leaf DataTypes.Port v) #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newSmallArray#
                                         @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.+# ww4 1#)
                                         (Data.HashMap.Array.undefinedElem
                                            @ (Data.HashMap.Base.Leaf DataTypes.Port v))
                                         s1 of ds { (#,#) ipv3 ipv4 ->
                                  case GHC.Prim.copySmallArray#
                                         @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                         @ GHC.Prim.RealWorld
                                         ww2
                                         0#
                                         ipv4
                                         0#
                                         ww4
                                         ipv3 of s2 { DEFAULT ->
                                  case GHC.Prim.writeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                         ipv4
                                         ww4
                                         (Data.HashMap.Base.L
                                            @ DataTypes.Port
                                            @ v
                                            (GHC.Types.I# ww1)
                                            w3)
                                         s2 of s' { DEFAULT ->
                                  case GHC.Prim.unsafeFreezeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                         ipv4
                                         s' of ds2 { (#,#) ipv5 ipv6 ->
                                  (# ipv5,
                                     Data.HashMap.Array.Array
                                       @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                       ipv6 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                          ipv4 } }
                 } in
                 $wgo1
                   ww
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofSmallArray#
                      @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                      w2)) -}
dd4a2e49a3a065c9f71d84c90b2d9bc8
  $w$s$wupdateOrSnocWithKey1 ::
    ((DataTypes.Port, DataTypes.Port) -> v -> v -> v)
    -> DataTypes.Port
    -> DataTypes.Port
    -> v
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
  {- Arity: 5,
     Strictness: <L,C(C1(C1(U)))><L,U(U)><L,U(U)><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ @ v
                   (w :: (DataTypes.Port, DataTypes.Port) -> v -> v -> v)
                   (ww :: DataTypes.Port)
                   (ww1 :: DataTypes.Port)
                   (w1 :: v)
                   (w2 :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)) ->
                 let {
                   exit :: v
                           -> Data.HashMap.Array.Array#
                                (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                           -> GHC.Prim.Int#
                           -> (DataTypes.Port, DataTypes.Port)
                           -> v
                           -> Data.HashMap.Array.Array
                                (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                     <join 5> {- Arity: 5, Strictness: <L,U><S,U><S,U><L,U><L,U> -}
                   = \ (w3 :: v)[OneShot]
                       (ww2 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf
                                    (DataTypes.Port, DataTypes.Port) v))[OneShot]
                       (ww3 :: GHC.Prim.Int#)[OneShot]
                       (k2 :: (DataTypes.Port, DataTypes.Port))[OneShot]
                       (y :: v)[OneShot] ->
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.HashMap.Array.Array
                                   (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v) #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.thawSmallArray#
                                    @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                    @ GHC.Prim.RealWorld
                                    ww2
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                       ww2)
                                    s1 of ds2 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.writeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                    ipv5
                                    ww3
                                    (Data.HashMap.Base.L
                                       @ (DataTypes.Port, DataTypes.Port)
                                       @ v
                                       k2
                                       (w k2 w3 y))
                                    ipv4 of s' { DEFAULT ->
                             case GHC.Prim.unsafeFreezeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                    ipv5
                                    s' of ds3 { (#,#) ipv6 ipv7 ->
                             (# ipv6,
                                Data.HashMap.Array.Array
                                  @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                  ipv7 #) } } }) of ds2 { (#,#) ipv4 ipv5 ->
                     ipv5 }
                 } in
                 letrec {
                   $wgo1 :: DataTypes.Port
                            -> DataTypes.Port
                            -> v
                            -> Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> Data.HashMap.Array.Array
                                 (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                     <join 6> {- Arity: 6,
                                 Strictness: <L,U(U)><L,U(U)><L,U><S,U><S,U><S,U>, Inline: [2] -}
                   = \ (ww2 :: DataTypes.Port)
                       (ww3 :: DataTypes.Port)
                       (w3 :: v)
                       (ww4 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v))
                       (ww5 :: GHC.Prim.Int#)
                       (ww6 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww5 ww6 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexSmallArray#
                                 @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                 ww4
                                 ww5 of ds1 { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of ww7 { (,) ww8 ww9 ->
                          case ww2 of wild { GHC.Types.I# x ->
                          case ww8 of wild2 { GHC.Types.I# y1 ->
                          case GHC.Prim.==# x y1 of lwild1 {
                            DEFAULT -> $wgo1 wild ww3 w3 ww4 (GHC.Prim.+# ww5 1#) ww6
                            1#
                            -> case ww3 of wild3 { GHC.Types.I# x1 ->
                               case ww9 of wild4 { GHC.Types.I# y2 ->
                               case GHC.Prim.==# x1 y2 of lwild2 {
                                 DEFAULT -> $wgo1 wild wild3 w3 ww4 (GHC.Prim.+# ww5 1#) ww6
                                 1# -> exit w3 ww4 ww5 (wild, wild3) y } } } } } } } } }
                       1#
                       -> case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.HashMap.Array.Array
                                        (Data.HashMap.Base.Leaf
                                           (DataTypes.Port, DataTypes.Port) v) #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newSmallArray#
                                         @ (Data.HashMap.Base.Leaf
                                              (DataTypes.Port, DataTypes.Port) v)
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.+# ww6 1#)
                                         (Data.HashMap.Array.undefinedElem
                                            @ (Data.HashMap.Base.Leaf
                                                 (DataTypes.Port, DataTypes.Port) v))
                                         s1 of ds { (#,#) ipv3 ipv4 ->
                                  case GHC.Prim.copySmallArray#
                                         @ (Data.HashMap.Base.Leaf
                                              (DataTypes.Port, DataTypes.Port) v)
                                         @ GHC.Prim.RealWorld
                                         ww4
                                         0#
                                         ipv4
                                         0#
                                         ww6
                                         ipv3 of s2 { DEFAULT ->
                                  case GHC.Prim.writeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf
                                              (DataTypes.Port, DataTypes.Port) v)
                                         ipv4
                                         ww6
                                         (Data.HashMap.Base.L
                                            @ (DataTypes.Port, DataTypes.Port)
                                            @ v
                                            (ww2, ww3)
                                            w3)
                                         s2 of s' { DEFAULT ->
                                  case GHC.Prim.unsafeFreezeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf
                                              (DataTypes.Port, DataTypes.Port) v)
                                         ipv4
                                         s' of ds2 { (#,#) ipv5 ipv6 ->
                                  (# ipv5,
                                     Data.HashMap.Array.Array
                                       @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                       ipv6 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                          ipv4 } }
                 } in
                 $wgo1
                   ww
                   ww1
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofSmallArray#
                      @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                      w2)) -}
81ca76b969879d0d541db3c16d75ff02
  $wparseInput ::
    GHC.Base.String
    -> (# GHC.Base.String, DataTypes.Port, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   string :: [GHC.Base.String] = Data.OldList.words w
                 } in
                 (# GHC.List.$w!! @ GHC.Base.String string 0#,
                    case Text.Read.readEither8
                           @ DataTypes.Port
                           (Text.ParserCombinators.ReadP.run
                              @ DataTypes.Port
                              Main.parseInput5
                              (GHC.List.$w!! @ GHC.Base.String string 1#)) of wild {
                      [] -> Main.parseInput4
                      : x ds
                      -> case ds of wild1 { [] -> x : ipv ipv1 -> Main.parseInput3 } },
                    case Main.$wunsafeDrop @ GHC.Base.String 2# string of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ [GHC.Types.Char]
                              Main.parseInput1
                              xs1) } #)) -}
74d99211ca10a974e6cf538b4447d925
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap DataTypes.Port v
    -> (# (# #) | v #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [2] -}
d145204388252d60e601eebbd8165342
  $wpoly_go2 ::
    GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap DataTypes.Port v
    -> Data.HashMap.Base.HashMap DataTypes.Port v
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U><S,1*U>,
     Inline: [2] -}
976c1bddf0d92459f4da3e875395547f
  $wpoly_go3 ::
    GHC.Prim.Word#
    -> DataTypes.Port
    -> DataTypes.Port
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap (DataTypes.Port, DataTypes.Port) v
    -> Data.HashMap.Base.HashMap (DataTypes.Port, DataTypes.Port) v
  {- Arity: 6, Strictness: <S,U><L,U(U)><L,U(U)><L,U><L,U><S,1*U>,
     Inline: [2] -}
6944a81798d3dbcef17160565291471a
  $wprintTable ::
    GHC.Prim.MutVar#
      GHC.Prim.RealWorld
      (Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int)
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld
                            (Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path))
                   (ww1 :: GHC.Prim.MutVar#
                             GHC.Prim.RealWorld
                             (Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int))
                   (ww2 :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int)
                        ww1
                        w of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path)
                        ww
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Main.$wpoly_go1
                        @ DataTypes.Path
                        (GHC.Prim.int2Word# ww2)
                        ww2
                        0#
                        ipv3 of ds {
                   (#_|#) ds3
                   -> case Main.$s!1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   (#|_#) a
                   -> case a of wild {
                        DEFAULT
                        -> (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              (case GHC.Show.$wshowSignedInt
                                      0#
                                      ww2
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Base.++_$s++
                                 @ GHC.Types.Char
                                 (GHC.CString.unpackAppendCString#
                                    Main.parseInput2
                                    (case Main.$wpoly_go1
                                            @ GHC.Types.Int
                                            (GHC.Prim.int2Word# ww2)
                                            ww2
                                            0#
                                            ipv1 of ds3 {
                                       (#_|#) ds4 -> case Main.$s!1 ret_ty [GHC.Types.Char] of {}
                                       (#|_#) a1
                                       -> case a1 of ww3 { GHC.Types.I# ww7 ->
                                          case GHC.Show.$wshowSignedInt
                                                 0#
                                                 ww7
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                          GHC.Base.++_$s++
                                            @ GHC.Types.Char
                                            (GHC.CString.unpackAppendCString#
                                               Main.parseInput2
                                               (case wild of wild1 {
                                                  DataTypes.Local -> DataTypes.$fShowPath3
                                                  DataTypes.Portnumber port
                                                  -> case port of ww11 { GHC.Types.I# ww12 ->
                                                     case GHC.Show.$wshowSignedInt
                                                            0#
                                                            ww12
                                                            (GHC.Types.[]
                                                               @ GHC.Types.Char) of ww13 { (#,#) ww14 ww15 ->
                                                     GHC.Types.: @ GHC.Types.Char ww14 ww15 } } }))
                                            ww9
                                            ww10 } } }))
                                 ww5
                                 ww6 })
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv2
                        DataTypes.Udef -> (# ipv2, GHC.Tuple.() #) } } } }) -}
cd46e1e74ee86a6e957b7b0c0f0c686c
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [2] -}
32c64e29e44fbf1c35665005ce1140ab
  handleInput :: DataTypes.Node -> DataTypes.Lock -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,1*U(U(U),U(U),U(U),U(U),U(U),U(U),U(U))><L,1*U(U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleInput1
                  `cast`
                (<DataTypes.Node>_R
                 ->_R <DataTypes.Lock>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fcb2ac81599500ec05ba0ddc8891913b
  handleInput1 ::
    DataTypes.Node
    -> DataTypes.Lock
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,1*U(U(U),U(U),U(U),U(U),U(U),U(U),U(U))><L,1*U(U(U))><S,U> -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
d1aad4e2ca70f343fb79319c91e02c09
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4f2b6faf12777f7ad5d171ddb3532b2b
  parseInput ::
    GHC.Base.String
    -> (GHC.Base.String, DataTypes.Port, GHC.Base.String)
  {- Arity: 1, Strictness: <L,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wparseInput w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
1d4d5288e808ccfe483e913267668302
  parseInput1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.parseInput2) -}
6e2111b84d04efebfc5e7007350a9353
  parseInput2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" "#) -}
a0c8b625f9f19c77f2ff3ff31cebbe25
  parseInput3 :: DataTypes.Port
  {- Strictness: x -}
b35cb7347075b32badb76298027e8bf0
  parseInput4 :: DataTypes.Port
  {- Strictness: x -}
5a03a35a946ab5ae5bd404bbabbd9ff6
  parseInput5 :: Text.ParserCombinators.ReadP.P DataTypes.Port
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ DataTypes.Port
                   (Text.Read.readEither7 @ DataTypes.Port)) -}
89f4ab2760f0a6adb35080daa23b52fa
  printTable :: DataTypes.Node -> DataTypes.Port -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLLS(S)S(S)L),1*U(A,A,A,A,1*U(U),1*U(U),A)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printTable1
                  `cast`
                (<DataTypes.Node>_R
                 ->_R <DataTypes.Port>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e10c9657c6124e23c4b4033c185ee331
  printTable1 ::
    DataTypes.Node
    -> DataTypes.Port
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLLS(S)S(S)L),1*U(A,A,A,A,1*U(U),1*U(U),A)><S(S),1*U(U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: DataTypes.Node)
                   (w1 :: DataTypes.Port)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { DataTypes.Node ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww5
                        `cast`
                      (GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                               DataTypes.Port
                                               DataTypes.Path>_N) of ww8 { GHC.STRef.STRef ww9 ->
                 case ww6
                        `cast`
                      (GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                               DataTypes.Port
                                               GHC.Types.Int>_N) of ww10 { GHC.STRef.STRef ww11 ->
                 case w1 of ww12 { GHC.Types.I# ww13 ->
                 Main.$wprintTable ww9 ww11 ww13 w2 } } } }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

