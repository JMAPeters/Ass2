
==================== FINAL INTERFACE ====================
2019-12-19 11:07:13.9234908 UTC

interface main:NetworkFunctions 8065
  interface hash: 482c9ff5cea02c1bff01be0f778de8ef
  ABI hash: 1b55c7daa29a4d6607adfed0d2e7241d
  export-list hash: 58963bca5f5cbd9c4836f67da3d166c2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 36bae2b893636dcae15825da56d2f484
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  NetworkFunctions.connectSocket
  NetworkFunctions.connectTo
  NetworkFunctions.filterHashMap
  NetworkFunctions.getMinEstDistNeigh
  NetworkFunctions.getTup
  NetworkFunctions.handleConnection
  NetworkFunctions.listenForConnections
  NetworkFunctions.makeConnection
  NetworkFunctions.makeEstDist
  NetworkFunctions.makeRoutingTable
  NetworkFunctions.parseMessage
  NetworkFunctions.portToAddress
  NetworkFunctions.processDisconnect
  NetworkFunctions.processDist
  NetworkFunctions.processMessage
  NetworkFunctions.processRepair
  NetworkFunctions.readCommandLineArguments
  NetworkFunctions.recompute
module dependencies: DataTypes
package dependencies: array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0 network-2.8.0.1
                      stm-2.5.0.0 text-1.2.3.1 unordered-containers-0.2.10.0
orphans: stm-2.5.0.0:Control.Monad.STM
         network-2.8.0.1:Network.Socket
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.10.0:Data.HashMap.Base
                         unordered-containers-0.2.10.0:Data.HashSet.Base
import  -/  base-4.12.0.0:Control.Concurrent db627a2e14aa77645810b5e18852cc54
import  -/  base-4.12.0.0:Control.Exception 68d632685955b01899aa782b05b79cdf
import  -/  base-4.12.0.0:Control.Exception.Base 520b7537fcce27638136bb16d9a55e53
import  -/  base-4.12.0.0:Control.Monad 54356f938d3817a0115f506fce4f2fa3
import  -/  base-4.12.0.0:Data.Either 3f22662ea029dfb63e64f318274cbbbd
import  -/  base-4.12.0.0:Data.Foldable bdeac546b12282c8986759606b9295a5
import  -/  base-4.12.0.0:Data.IORef 9fe6be300ad920563b6d0585952c3155
import  -/  base-4.12.0.0:Data.List 6c60559263db7cf0f22549b9673785b9
import  -/  base-4.12.0.0:Data.OldList 9c79c2259344fa5285ac49797d9c5db1
import  -/  base-4.12.0.0:Data.Ord b73e1a818839699fc46f923dc8657439
import  -/  base-4.12.0.0:Data.Tuple 3bf97d65c8e783335a95628f6e4f6f75
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Conc.IO e5574a04330387198d27d33dfb992cd8
import  -/  base-4.12.0.0:GHC.Conc.Sync fae6c83841bcf1584e2587725f53d9ce
import  -/  base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import  -/  base-4.12.0.0:GHC.IO.Exception 99271e07ec0e09b76d45c79794dad266
import  -/  base-4.12.0.0:GHC.IO.Handle 5b3f689b082eee6e7562e9b58323b91a
import  -/  base-4.12.0.0:GHC.IO.Handle.Text 2ca19f0c4c6b23c3ad9d1464d36c5281
import  -/  base-4.12.0.0:GHC.IO.Handle.Types b0667350495b7969f4b13a8e9686d1b4
import  -/  base-4.12.0.0:GHC.IO.IOMode 64e15bc6e405c4ae814493543509e7ab
import  -/  base-4.12.0.0:GHC.IORef 08be4ed51bab2548b874b071705c05a2
import  -/  base-4.12.0.0:GHC.List bb56c56a8dc21963b5824914872db158
import  -/  base-4.12.0.0:GHC.Num 8203d3fee487126cffd5e55ba5d0e8c3
import  -/  base-4.12.0.0:GHC.Real 3b42f3125c1d17d4e4b4437a3c97310f
import  -/  base-4.12.0.0:GHC.Show fa6032f3f820e8e8ec87b97bdca4e160
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Environment 045df705c1f205b31d24a0f6340ea2db
import  -/  base-4.12.0.0:System.IO 51ffc52e2e8495d5c7b596557cf2be89
import  -/  base-4.12.0.0:Text.Read 580457154dc9d710b792a13b428d58dd
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  DataTypes ea44efec5024321692dbf6588e9ef1c6
  exports: 6f4e5eb89d776ab7e359de84ce58688f
  Lock c0d1d948e3b03977e141e8626010c1b0
  Node cc2a5c9b30ebf4d0401f733c49f05f26
  Path 21e69455f4b398647c05932e8c9b037d
  Port 352e18570b51b10ff1762f7515540820
  Portnumber fa6fd06ebfa214c388b4a31bcf9a9744
  Udef 9528484777bb447e18d40bbb4046bb1d
  allNodes cc2a5c9b30ebf4d0401f733c49f05f26
  estDist cc2a5c9b30ebf4d0401f733c49f05f26
  estDistNeigh cc2a5c9b30ebf4d0401f733c49f05f26
  interlocked 1236afa38e4671a8ee8b0d793b90d786
  me cc2a5c9b30ebf4d0401f733c49f05f26
  neighConnection cc2a5c9b30ebf4d0401f733c49f05f26
  neighbours cc2a5c9b30ebf4d0401f733c49f05f26
  routingTable cc2a5c9b30ebf4d0401f733c49f05f26
import  -/  network-2.8.0.1:Network.Socket cccb3c178b1f8d4043b518ed5f994246
import  -/  network-2.8.0.1:Network.Socket.Types 8885d0583783d86ae72c97c90ee0757a
import  -/  stm-2.5.0.0:Control.Concurrent.STM c418f6f5d5174c7fcc2a4eb1734356a3
import  -/  unordered-containers-0.2.10.0:Data.HashMap.Base bb401e756b294adc833e9f91ee987a2e
import  -/  unordered-containers-0.2.10.0:Data.HashMap.Lazy 09ee012ce2aeb80cf8693cad08fc6338
db533cef9d9a33ea2e4636fc26a87439
  $s!1 :: v
  {- Strictness: x -}
4f1a870b3b46abb60300a6efaaae314f
  $slookup#1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0b2837f6bf0f2937e8d804c01e99bb66
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   NetworkFunctions.$trModule3
                   NetworkFunctions.$trModule1) -}
5318dc68c31e5746082756f9e995d1df
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NetworkFunctions.$trModule2) -}
e8d438a8277d1e530af97d98e9cb048a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NetworkFunctions"#) -}
86f6644e2ec78f3f2a1cf696801ba453
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NetworkFunctions.$trModule4) -}
7bb54ea3c3100a87012b3109f8c5ef81
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6299f476668438793aa8d65b9c1afdf6
  $w$s$wupdateOrSnocWithKey ::
    (DataTypes.Port -> v -> v -> v)
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf DataTypes.Port v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf DataTypes.Port v)
  {- Arity: 4, Strictness: <L,C(C1(C1(U)))><S,U><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ @ v
                   (w :: DataTypes.Port -> v -> v -> v)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf DataTypes.Port v)) ->
                 let {
                   exit :: v
                           -> Data.HashMap.Array.Array#
                                (Data.HashMap.Base.Leaf DataTypes.Port v)
                           -> GHC.Prim.Int#
                           -> DataTypes.Port
                           -> v
                           -> Data.HashMap.Array.Array
                                (Data.HashMap.Base.Leaf DataTypes.Port v)
                     <join 5> {- Arity: 5, Strictness: <L,U><S,U><S,U><L,U><L,U> -}
                   = \ (w3 :: v)[OneShot]
                       (ww1 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf DataTypes.Port v))[OneShot]
                       (ww2 :: GHC.Prim.Int#)[OneShot]
                       (k2 :: DataTypes.Port)[OneShot]
                       (y :: v)[OneShot] ->
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.HashMap.Array.Array
                                   (Data.HashMap.Base.Leaf DataTypes.Port v) #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.thawSmallArray#
                                    @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                    @ GHC.Prim.RealWorld
                                    ww1
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                       ww1)
                                    s1 of ds2 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.writeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                    ipv5
                                    ww2
                                    (Data.HashMap.Base.L @ DataTypes.Port @ v k2 (w k2 w3 y))
                                    ipv4 of s' { DEFAULT ->
                             case GHC.Prim.unsafeFreezeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                    ipv5
                                    s' of ds3 { (#,#) ipv6 ipv7 ->
                             (# ipv6,
                                Data.HashMap.Array.Array
                                  @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                  ipv7 #) } } }) of ds2 { (#,#) ipv4 ipv5 ->
                     ipv5 }
                 } in
                 letrec {
                   $wgo1 :: GHC.Prim.Int#
                            -> v
                            -> Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf DataTypes.Port v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> Data.HashMap.Array.Array
                                 (Data.HashMap.Base.Leaf DataTypes.Port v)
                     <join 5> {- Arity: 5, Strictness: <L,U><L,U><S,U><S,U><S,U>,
                                 Inline: [2] -}
                   = \ (ww1 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww2 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf DataTypes.Port v))
                       (ww3 :: GHC.Prim.Int#)
                       (ww4 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww3 ww4 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexSmallArray#
                                 @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                 ww2
                                 ww3 of ds1 { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { GHC.Types.I# y1 ->
                          case GHC.Prim.==# ww1 y1 of lwild1 {
                            DEFAULT -> $wgo1 ww1 w3 ww2 (GHC.Prim.+# ww3 1#) ww4
                            1# -> exit w3 ww2 ww3 (GHC.Types.I# ww1) y } } } }
                       1#
                       -> case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.HashMap.Array.Array
                                        (Data.HashMap.Base.Leaf DataTypes.Port v) #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newSmallArray#
                                         @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.+# ww4 1#)
                                         (Data.HashMap.Array.undefinedElem
                                            @ (Data.HashMap.Base.Leaf DataTypes.Port v))
                                         s1 of ds { (#,#) ipv3 ipv4 ->
                                  case GHC.Prim.copySmallArray#
                                         @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                         @ GHC.Prim.RealWorld
                                         ww2
                                         0#
                                         ipv4
                                         0#
                                         ww4
                                         ipv3 of s2 { DEFAULT ->
                                  case GHC.Prim.writeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                         ipv4
                                         ww4
                                         (Data.HashMap.Base.L
                                            @ DataTypes.Port
                                            @ v
                                            (GHC.Types.I# ww1)
                                            w3)
                                         s2 of s' { DEFAULT ->
                                  case GHC.Prim.unsafeFreezeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                         ipv4
                                         s' of ds2 { (#,#) ipv5 ipv6 ->
                                  (# ipv5,
                                     Data.HashMap.Array.Array
                                       @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                                       ipv6 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                          ipv4 } }
                 } in
                 $wgo1
                   ww
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofSmallArray#
                      @ (Data.HashMap.Base.Leaf DataTypes.Port v)
                      w2)) -}
d556d90706cefb4ffcad8acc39c2df90
  $w$s$wupdateOrSnocWithKey1 ::
    ((DataTypes.Port, DataTypes.Port) -> v -> v -> v)
    -> DataTypes.Port
    -> DataTypes.Port
    -> v
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
  {- Arity: 5,
     Strictness: <L,C(C1(C1(U)))><L,U(U)><L,U(U)><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ @ v
                   (w :: (DataTypes.Port, DataTypes.Port) -> v -> v -> v)
                   (ww :: DataTypes.Port)
                   (ww1 :: DataTypes.Port)
                   (w1 :: v)
                   (w2 :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)) ->
                 let {
                   exit :: v
                           -> Data.HashMap.Array.Array#
                                (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                           -> GHC.Prim.Int#
                           -> (DataTypes.Port, DataTypes.Port)
                           -> v
                           -> Data.HashMap.Array.Array
                                (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                     <join 5> {- Arity: 5, Strictness: <L,U><S,U><S,U><L,U><L,U> -}
                   = \ (w3 :: v)[OneShot]
                       (ww2 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf
                                    (DataTypes.Port, DataTypes.Port) v))[OneShot]
                       (ww3 :: GHC.Prim.Int#)[OneShot]
                       (k2 :: (DataTypes.Port, DataTypes.Port))[OneShot]
                       (y :: v)[OneShot] ->
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.HashMap.Array.Array
                                   (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v) #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.thawSmallArray#
                                    @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                    @ GHC.Prim.RealWorld
                                    ww2
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                       ww2)
                                    s1 of ds2 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.writeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                    ipv5
                                    ww3
                                    (Data.HashMap.Base.L
                                       @ (DataTypes.Port, DataTypes.Port)
                                       @ v
                                       k2
                                       (w k2 w3 y))
                                    ipv4 of s' { DEFAULT ->
                             case GHC.Prim.unsafeFreezeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                    ipv5
                                    s' of ds3 { (#,#) ipv6 ipv7 ->
                             (# ipv6,
                                Data.HashMap.Array.Array
                                  @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                  ipv7 #) } } }) of ds2 { (#,#) ipv4 ipv5 ->
                     ipv5 }
                 } in
                 letrec {
                   $wgo1 :: DataTypes.Port
                            -> DataTypes.Port
                            -> v
                            -> Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> Data.HashMap.Array.Array
                                 (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                     <join 6> {- Arity: 6,
                                 Strictness: <L,U(U)><L,U(U)><L,U><S,U><S,U><S,U>, Inline: [2] -}
                   = \ (ww2 :: DataTypes.Port)
                       (ww3 :: DataTypes.Port)
                       (w3 :: v)
                       (ww4 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v))
                       (ww5 :: GHC.Prim.Int#)
                       (ww6 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww5 ww6 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexSmallArray#
                                 @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                 ww4
                                 ww5 of ds1 { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of ww7 { (,) ww8 ww9 ->
                          case ww2 of wild { GHC.Types.I# x ->
                          case ww8 of wild2 { GHC.Types.I# y1 ->
                          case GHC.Prim.==# x y1 of lwild1 {
                            DEFAULT -> $wgo1 wild ww3 w3 ww4 (GHC.Prim.+# ww5 1#) ww6
                            1#
                            -> case ww3 of wild3 { GHC.Types.I# x1 ->
                               case ww9 of wild4 { GHC.Types.I# y2 ->
                               case GHC.Prim.==# x1 y2 of lwild2 {
                                 DEFAULT -> $wgo1 wild wild3 w3 ww4 (GHC.Prim.+# ww5 1#) ww6
                                 1# -> exit w3 ww4 ww5 (wild, wild3) y } } } } } } } } }
                       1#
                       -> case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '[ 'GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.HashMap.Array.Array
                                        (Data.HashMap.Base.Leaf
                                           (DataTypes.Port, DataTypes.Port) v) #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newSmallArray#
                                         @ (Data.HashMap.Base.Leaf
                                              (DataTypes.Port, DataTypes.Port) v)
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.+# ww6 1#)
                                         (Data.HashMap.Array.undefinedElem
                                            @ (Data.HashMap.Base.Leaf
                                                 (DataTypes.Port, DataTypes.Port) v))
                                         s1 of ds { (#,#) ipv3 ipv4 ->
                                  case GHC.Prim.copySmallArray#
                                         @ (Data.HashMap.Base.Leaf
                                              (DataTypes.Port, DataTypes.Port) v)
                                         @ GHC.Prim.RealWorld
                                         ww4
                                         0#
                                         ipv4
                                         0#
                                         ww6
                                         ipv3 of s2 { DEFAULT ->
                                  case GHC.Prim.writeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf
                                              (DataTypes.Port, DataTypes.Port) v)
                                         ipv4
                                         ww6
                                         (Data.HashMap.Base.L
                                            @ (DataTypes.Port, DataTypes.Port)
                                            @ v
                                            (ww2, ww3)
                                            w3)
                                         s2 of s' { DEFAULT ->
                                  case GHC.Prim.unsafeFreezeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf
                                              (DataTypes.Port, DataTypes.Port) v)
                                         ipv4
                                         s' of ds2 { (#,#) ipv5 ipv6 ->
                                  (# ipv5,
                                     Data.HashMap.Array.Array
                                       @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                                       ipv6 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                          ipv4 } }
                 } in
                 $wgo1
                   ww
                   ww1
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofSmallArray#
                      @ (Data.HashMap.Base.Leaf (DataTypes.Port, DataTypes.Port) v)
                      w2)) -}
153ef307e310af4891557f634089436e
  $wgetMinEstDistNeigh ::
    DataTypes.Port
    -> [GHC.Types.Int]
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap
            (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((DataTypes.Port, DataTypes.Port), GHC.Types.Int) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U(U)><L,1*U><S,U><S,U>,
     Inline: [2] -}
67f18687e90ad5ef29399a1d170413c9
  $whandleConnection ::
    Foreign.C.Types.CInt
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> DataTypes.Node
    -> DataTypes.Lock
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U)><S,U><L,1*U(U(U),1*U(U),1*U(U),1*U(U),U(U),U(U),U(U))><L,1*U(1*U(U))><S,U>,
     Inline: [2] -}
0d1a0c6571c9bcfee04019461905b340
  $wlistenForConnections ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> DataTypes.Node
    -> DataTypes.Lock
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><L,U(U(U),U(U),U(U),U(U),U(U),U(U),U(U))><L,U(U(U))><S,U>,
     Inline: [2] -}
17467b1132a322b9d59ad0245a4699d8
  $wparseMessage ::
    GHC.Base.String
    -> (# DataTypes.Port, GHC.Base.String, [GHC.Base.String] #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   string :: [GHC.Base.String] = Data.OldList.words w
                 } in
                 (# case Text.Read.readEither8
                           @ DataTypes.Port
                           (Text.ParserCombinators.ReadP.run
                              @ DataTypes.Port
                              NetworkFunctions.parseMessage3
                              (GHC.List.$w!! @ GHC.Base.String string 0#)) of wild {
                      [] -> NetworkFunctions.parseMessage2
                      : x ds
                      -> case ds of wild1 {
                           [] -> x : ipv ipv1 -> NetworkFunctions.parseMessage1 } },
                    GHC.List.$w!! @ GHC.Base.String string 1#,
                    NetworkFunctions.$wunsafeDrop @ GHC.Base.String 2# string #)) -}
9117ce220bcb09e875c0d0023237d464
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap DataTypes.Port v
    -> (# (# #) | v #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [2] -}
8df9d21246297549c68d2ad8ab8feac8
  $wpoly_go2 ::
    GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap DataTypes.Port v
    -> Data.HashMap.Base.HashMap DataTypes.Port v
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [2] -}
ac8480071e49b016802b06230e02e00d
  $wpoly_go3 ::
    GHC.Prim.Int#
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf DataTypes.Port v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Maybe.Maybe GHC.Types.Int
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><S,U><S,U>,
     Inline: [2] -}
11fad5612d78e4ccffdfc6920a00e3d2
  $wpoly_go4 ::
    GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap DataTypes.Port v
    -> Data.HashMap.Base.HashMap DataTypes.Port v
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U><S,1*U>,
     Inline: [2] -}
786bc22459cb8a68c23e19591440e9bf
  $wpoly_go5 ::
    GHC.Prim.Word#
    -> DataTypes.Port
    -> DataTypes.Port
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap (DataTypes.Port, DataTypes.Port) v
    -> Data.HashMap.Base.HashMap (DataTypes.Port, DataTypes.Port) v
  {- Arity: 6, Strictness: <S,U><L,U(U)><L,U(U)><L,U><L,U><S,1*U>,
     Inline: [2] -}
0c7360e750b43d9098ebea98794c0a95
  $wpoly_go6 ::
    GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap DataTypes.Port v
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap DataTypes.Port v #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [2] -}
302c2b9ab3f6ce14218b69912e0ff0db
  $wprocessDisconnect ::
    DataTypes.Port
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld [DataTypes.Port]
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld [DataTypes.Port]
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap
            DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path)
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int)
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap
            (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
    -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
    -> DataTypes.Port
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U(U)><S,U><S,U><S,U><L,U(U)><L,U(U)><L,U(U)><S,U><L,U(U)><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: DataTypes.Port)
                   (ww1 :: GHC.Prim.MutVar# GHC.Prim.RealWorld [DataTypes.Port])
                   (ww2 :: GHC.Prim.MutVar# GHC.Prim.RealWorld [DataTypes.Port])
                   (ww3 :: GHC.Prim.MutVar#
                             GHC.Prim.RealWorld
                             (Data.HashMap.Base.HashMap
                                DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle)))
                   (ww4 :: GHC.IORef.IORef
                             (Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path))
                   (ww5 :: GHC.IORef.IORef
                             (Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int))
                   (ww6 :: GHC.IORef.IORef
                             (Data.HashMap.Base.HashMap
                                (DataTypes.Port, DataTypes.Port) GHC.Types.Int))
                   (ww7 :: GHC.Prim.MVar# GHC.Prim.RealWorld ())
                   (w :: DataTypes.Port)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
                   = \ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.readMutVar#
                            @ GHC.Prim.RealWorld
                            @ [DataTypes.Port]
                            ww1
                            w2 of ds1 { (#,#) ipv ipv1 ->
                     case GHC.Prim.writeMutVar#
                            @ GHC.Prim.RealWorld
                            @ [DataTypes.Port]
                            ww1
                            (Data.OldList.deleteBy @ DataTypes.Port GHC.Classes.eqInt w ipv1)
                            ipv of s2# { DEFAULT ->
                     case GHC.Prim.readMutVar#
                            @ GHC.Prim.RealWorld
                            @ (Data.HashMap.Base.HashMap
                                 DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
                            ww3
                            s2# of ds2 { (#,#) ipv2 ipv3 ->
                     case GHC.Prim.writeMutVar#
                            @ GHC.Prim.RealWorld
                            @ (Data.HashMap.Base.HashMap
                                 DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
                            ww3
                            (case w of wild { GHC.Types.I# x# ->
                             NetworkFunctions.$wpoly_go2
                               @ (GHC.Types.IO GHC.IO.Handle.Types.Handle)
                               (GHC.Prim.int2Word# x#)
                               x#
                               0#
                               ipv3 })
                            ipv2 of s2#1 { DEFAULT ->
                     case GHC.Prim.readMutVar#
                            @ GHC.Prim.RealWorld
                            @ [DataTypes.Port]
                            ww2
                            s2#1 of ds3 { (#,#) ipv4 ipv5 ->
                     let {
                       ds4 :: GHC.STRef.STRef
                                GHC.Prim.RealWorld
                                (Data.HashMap.Base.HashMap
                                   DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
                       = GHC.STRef.STRef
                           @ GHC.Prim.RealWorld
                           @ (Data.HashMap.Base.HashMap
                                DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
                           ww3
                     } in
                     let {
                       ds5 :: GHC.STRef.STRef GHC.Prim.RealWorld [DataTypes.Port]
                       = GHC.STRef.STRef @ GHC.Prim.RealWorld @ [DataTypes.Port] ww2
                     } in
                     let {
                       exit :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                         <join 1> {- Arity: 1, Strictness: <S,U> -}
                       = \ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         DataTypes.$winterlocked ww7 NetworkFunctions.processDisconnect6 eta
                     } in
                     letrec {
                       go1 :: [DataTypes.Port]
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                         <join 2> {- Arity: 2, Strictness: <S,1*U><S,U> -}
                       = \ (ds :: [DataTypes.Port])
                           (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case ds of wild {
                           [] -> exit eta
                           : y ys
                           -> case ww6
                                     `cast`
                                   (GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                                            (DataTypes.Port, DataTypes.Port)
                                                            GHC.Types.Int>_N) of wild1 { GHC.STRef.STRef var# ->
                              case GHC.Prim.readMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ (Data.HashMap.Base.HashMap
                                          (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
                                     var#
                                     eta of ds6 { (#,#) ipv6 ipv7 ->
                              case GHC.Prim.writeMutVar#
                                     @ GHC.Prim.RealWorld
                                     @ (Data.HashMap.Base.HashMap
                                          (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
                                     var#
                                     (NetworkFunctions.filterHashMap w ipv7)
                                     ipv6 of s2#2 { DEFAULT ->
                              case ww of ww8 { GHC.Types.I# ww9 ->
                              case y of ww10 { GHC.Types.I# ww11 ->
                              case NetworkFunctions.$wrecompute
                                     ww9
                                     ds5 `cast` (Sym (GHC.IORef.N:IORef[0]) <[DataTypes.Port]>_N)
                                     ds4
                                       `cast`
                                     (Sym (GHC.IORef.N:IORef[0]) <Data.HashMap.Base.HashMap
                                                                    DataTypes.Port
                                                                    (GHC.Types.IO
                                                                       GHC.IO.Handle.Types.Handle)>_N)
                                     ww4
                                     ww5
                                     wild1
                                       `cast`
                                     (Sym (GHC.IORef.N:IORef[0]) <Data.HashMap.Base.HashMap
                                                                    (DataTypes.Port, DataTypes.Port)
                                                                    GHC.Types.Int>_N)
                                     ww11
                                     s2#2 of ds7 { (#,#) ipv8 ipv9 ->
                              go1 ys ipv8 } } } } } } }
                     } in
                     go1 ipv5 ipv4 } } } } }
                 } in
                 case NetworkFunctions.processDisconnect5 of wild {
                   GHC.Types.False
                   -> case NetworkFunctions.processDisconnect2 of wild1 {
                        GHC.Types.False
                        -> case DataTypes.interlocked2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.takeMVar#
                                  @ GHC.Prim.RealWorld
                                  @ ()
                                  ww7
                                  w1 of ds1 { (#,#) ipv ipv1 ->
                           $w$j ipv } }
                   GHC.Types.True
                   -> case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ ()
                             ww7
                             GHC.Tuple.()
                             w1 of s2# { DEFAULT ->
                      $w$j s2# } }) -}
717836aa0a5d9cca4c17b6b71481a0b3
  $wprocessDist ::
    GHC.Prim.Int#
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld [DataTypes.Port]
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap
            DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path)
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap
            (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
    -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
    -> DataTypes.Port
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <S,U><S,U><L,1*U(U)><L,U(U)><L,U(U)><S,U><S,U><L,1*U(U)><S,1*U><S,U>,
     Inline: [2] -}
b4cb548c93eef75c94a6e6882f4c648c
  $wprocessMessage ::
    GHC.Prim.Int#
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap
            DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path)
    -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U><S,U><L,U><S,U>,
     Inline: [2] -}
c4b03ead1cafc0fdee6c8c5675d25168
  $wprocessRepair ::
    DataTypes.Port
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld [DataTypes.Port]
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld [DataTypes.Port]
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap
            DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int)
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap
            (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
    -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
    -> DataTypes.Port
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U(U)><S,U><S,U><S,U><L,U(U)><L,U(U)><S,U><L,U(U)><S,U>,
     Inline: [2] -}
b98b86b4dcf2052413258335d71c1aac
  $wrecompute ::
    GHC.Prim.Int#
    -> GHC.IORef.IORef [DataTypes.Port]
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap
            DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle))
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path)
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int)
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap
            (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><S,U>,
     Inline: [2] -}
b6263a63759a1fde12732a6dc73d6712
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [2] -}
2a11175ce99876c5445e6add90d8a2a3
  connectSocket ::
    GHC.Types.Int -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.connectSocket1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
5c12571dd394559a733614e8fdeba74a
  connectSocket1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (portNumber :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   lvl55 :: Network.Socket.Types.PortNumber
                   = case portNumber of wild { GHC.Types.I# i ->
                     (GHC.Word.W16# (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i)))
                       `cast`
                     (Sym (Network.Socket.Types.N:PortNumber[0])) }
                 } in
                 let {
                   lvl56 :: Network.Socket.Types.SockAddr
                   = Network.Socket.Types.SockAddrInet
                       lvl55
                       NetworkFunctions.connectSocket4
                 } in
                 letrec {
                   connect' :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Network.Socket.Types.Socket #)
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case Network.Socket.$wsocket
                            Network.Socket.Types.AF_INET
                            Network.Socket.Types.Stream
                            0#
                            s of ds1 { (#,#) ipv ipv1 ->
                     case GHC.Prim.catch#
                            @ (Data.Either.Either GHC.IO.Exception.IOException ())
                            @ GHC.Exception.Type.SomeException
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                             case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                             case Network.Socket.$wconnect
                                    ww1
                                    ww7
                                    lvl56
                                    s1 of ds2 { (#,#) ipv2 ipv3 ->
                             (# ipv2,
                                Data.Either.Right
                                  @ GHC.IO.Exception.IOException
                                  @ ()
                                  ipv3 #) } } })
                            NetworkFunctions.connectSocket3
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild {
                       Data.Either.Left ds
                       -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                            GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                 GHC.Prim.realWorld# of wild1 { (#,#) ds3 ds4 ->
                          case ds4 of wild2 {
                            DEFAULT
                            -> case GHC.Conc.Windows.threadDelay1
                                      NetworkFunctions.connectSocket2
                                      ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                               connect' ipv4 }
                            0#
                            -> case GHC.Prim.delay#
                                      @ GHC.Prim.RealWorld
                                      1000000#
                                      ipv2 of s' { DEFAULT ->
                               connect' s' } } }
                       Data.Either.Right ds -> (# ipv2, ipv1 #) } } }
                 } in
                 connect' eta) -}
9f5408f8ab7c138d6f0bd6d37312f1ae
  connectSocket2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# 1000000#) -}
a94a26273ff856ae62122486253d771e
  connectSocket3 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ (Data.Either.Either GHC.IO.Exception.IOException ())
                        wild
                        eta1
                   GHC.Types.True
                   -> (# eta1,
                         Data.Either.Left
                           @ GHC.IO.Exception.IOException
                           @ ()
                           e3
                             `cast`
                           (UnsafeCo representational e2 GHC.IO.Exception.IOException) #) } }) -}
2ca38f9f8251c31089c66ed17e533635
  connectSocket4 :: Network.Socket.Types.HostAddress
  {- Unfolding: (case {__pkg_ccall network-2.8.0.1 GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Word# #)}
                        2130706433##
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 GHC.Word.W32# (GHC.Prim.narrow32Word# ds1) }) -}
f5f0c4e5022435b5527527a005b7524d
  connectTo ::
    DataTypes.Port -> GHC.Types.IO GHC.IO.Handle.Types.Handle
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.connectTo1
                  `cast`
                (<DataTypes.Port>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R)) -}
07c62b715b7654c03395b33828591f1f
  connectTo1 ::
    DataTypes.Port
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IO.Handle.Types.Handle #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (neighbour :: DataTypes.Port)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case NetworkFunctions.connectSocket1
                        neighbour
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Network.Socket.$wsocketToHandle
                   ww1
                   ww7
                   GHC.IO.IOMode.ReadWriteMode
                   ipv } } }) -}
5c5e4c95ca0ec70bd5b16b4eba3e22d2
  filterHashMap ::
    DataTypes.Port
    -> Data.HashMap.Base.HashMap
         (DataTypes.Port, DataTypes.Port) GHC.Types.Int
    -> Data.HashMap.Base.HashMap
         (DataTypes.Port, DataTypes.Port) GHC.Types.Int
  {- Arity: 2, Strictness: <L,U(U)><S,1*U> -}
af6d4bbaf64fa362d486dae0d49a646b
  getMinEstDistNeigh ::
    DataTypes.Port
    -> [GHC.Types.Int]
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap
            (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
    -> GHC.Types.IO ((DataTypes.Port, DataTypes.Port), GHC.Types.Int)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,1*U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.getMinEstDistNeigh1
                  `cast`
                (<DataTypes.Port>_R
                 ->_R <[GHC.Types.Int]>_R
                 ->_R <GHC.IORef.IORef
                         (Data.HashMap.Base.HashMap
                            (DataTypes.Port, DataTypes.Port) GHC.Types.Int)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <((DataTypes.Port, DataTypes.Port), GHC.Types.Int)>_R)) -}
bbb3fc8238c08f3ba85a939241934e1f
  getMinEstDistNeigh1 ::
    DataTypes.Port
    -> [GHC.Types.Int]
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap
            (DataTypes.Port, DataTypes.Port) GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((DataTypes.Port, DataTypes.Port), GHC.Types.Int) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,1*U><S(S),1*U(U)><S,U>, Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: DataTypes.Port)
                   (w1 :: [GHC.Types.Int])
                   (w2 :: GHC.IORef.IORef
                            (Data.HashMap.Base.HashMap
                               (DataTypes.Port, DataTypes.Port) GHC.Types.Int))
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w2
                        `cast`
                      (GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                               (DataTypes.Port, DataTypes.Port)
                                               GHC.Types.Int>_N) of ww { GHC.STRef.STRef ww1 ->
                 NetworkFunctions.$wgetMinEstDistNeigh w w1 ww1 w3 }) -}
b6628044a03b26cd479665f3103e8ca3
  getTup ::
    [GHC.Types.Int]
    -> [((DataTypes.Port, DataTypes.Port), GHC.Types.Int)]
    -> ((DataTypes.Port, DataTypes.Port), GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (allNodes :: [GHC.Types.Int])
                   (ds :: [((DataTypes.Port, DataTypes.Port), GHC.Types.Int)]) ->
                 case ds of wild {
                   []
                   -> (NetworkFunctions.getTup1,
                       case GHC.List.$wlenAcc
                              @ GHC.Types.Int
                              allNodes
                              0# of ww2 { DEFAULT ->
                       GHC.Types.I# ww2 })
                   : x ds1 -> case ds1 of wild1 { DEFAULT -> x } }) -}
d2ada1e995d2a5d813cb17794751e190
  getTup1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((NetworkFunctions.$slookup#1,
                  NetworkFunctions.$slookup#1)) -}
95faab6e7c264fad70f99f72c13f3e4f
  handleConnection ::
    Network.Socket.Types.Socket
    -> DataTypes.Node -> DataTypes.Lock -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U(U),1*U(U),1*U(U),1*U(U),U(U),U(U),U(U))><L,1*U(1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.handleConnection1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <DataTypes.Node>_R
                 ->_R <DataTypes.Lock>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d621552757de6617924a7bf4fd8f1eb9
  handleConnection1 ::
    Network.Socket.Types.Socket
    -> DataTypes.Node
    -> DataTypes.Lock
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U(U),1*U(U),1*U(U),1*U(U),U(U),U(U),U(U))><L,1*U(1*U(U))><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: DataTypes.Node)
                   (w2 :: DataTypes.Lock)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 NetworkFunctions.$whandleConnection ww1 ww7 w1 w2 w3 } }) -}
28eb7fec3080f73b592d837d3a7a9bd5
  listenForConnections ::
    Network.Socket.Types.Socket
    -> DataTypes.Node -> DataTypes.Lock -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),1*U(U))><L,U(U(U),U(U),U(U),U(U),U(U),U(U),U(U))><L,U(U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.listenForConnections1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <DataTypes.Node>_R
                 ->_R <DataTypes.Lock>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f5a562c8961dcf2322ecb676f364492d
  listenForConnections1 ::
    Network.Socket.Types.Socket
    -> DataTypes.Node
    -> DataTypes.Lock
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),1*U(U))><L,U(U(U),U(U),U(U),U(U),U(U),U(U),U(U))><L,U(U(U))><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: DataTypes.Node)
                   (w2 :: DataTypes.Lock)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 NetworkFunctions.$wlistenForConnections
                   ww1
                   ww2
                   ww3
                   ww4
                   ww7
                   w1
                   w2
                   w3 } }) -}
6670c24a812ee3843e665315f3b1a038
  makeConnection ::
    [DataTypes.Port]
    -> Data.HashMap.Base.HashMap
         DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (neighbours :: [DataTypes.Port]) ->
                 NetworkFunctions.makeConnection_go2
                   neighbours
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ (GHC.Types.IO GHC.IO.Handle.Types.Handle)
                      NetworkFunctions.connectTo1
                        `cast`
                      (<DataTypes.Port>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R))
                      neighbours)
                   (Data.HashMap.Base.Empty
                      @ DataTypes.Port
                      @ (GHC.Types.IO GHC.IO.Handle.Types.Handle))) -}
ccfe9c96a7cda14191668b3606d4baaf
  makeConnection_go2 ::
    [GHC.Types.Int]
    -> [GHC.Types.IO GHC.IO.Handle.Types.Handle]
    -> Data.HashMap.Base.HashMap
         DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle)
    -> Data.HashMap.Base.HashMap
         DataTypes.Port (GHC.Types.IO GHC.IO.Handle.Types.Handle)
  {- Arity: 3, Strictness: <S,1*U><L,1*U><S,1*U> -}
59656238358d1ed1d2185fe7d6d2ac81
  makeEstDist ::
    [DataTypes.Port]
    -> GHC.Types.Int
    -> Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int
    -> Data.HashMap.Base.HashMap DataTypes.Port GHC.Types.Int
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
8e787bafdf80db7b2e340682d0faf82a
  makeRoutingTable ::
    [DataTypes.Port]
    -> Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path
    -> Data.HashMap.Base.HashMap DataTypes.Port DataTypes.Path
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
586a8f4d1318774e521ad82b073ceba4
  parseMessage ::
    GHC.Base.String
    -> (DataTypes.Port, GHC.Base.String, [GHC.Base.String])
  {- Arity: 1, Strictness: <L,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case NetworkFunctions.$wparseMessage
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
4cb8c008e3e044acb97f35da17def758
  parseMessage1 :: GHC.Types.Int
  {- Strictness: x -}
75efd7ce734bf256bbd41fc3b85ff2fd
  parseMessage2 :: GHC.Types.Int
  {- Strictness: x -}
4baf149acd5733276539ed868c672469
  parseMessage3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
81d94d68caf0fa3c97978458d6696fae
  portToAddress :: GHC.Types.Int -> Network.Socket.Types.SockAddr
  {- Arity: 1, Strictness: <L,1*U(U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (portNumber :: GHC.Types.Int) ->
                 Network.Socket.Types.SockAddrInet
                   (case portNumber of wild { GHC.Types.I# i ->
                    (GHC.Word.W16# (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i)))
                      `cast`
                    (Sym (Network.Socket.Types.N:PortNumber[0])) })
                   NetworkFunctions.connectSocket4) -}
f325ec7add05b786137b6d730a48874d
  processDisconnect ::
    DataTypes.Node
    -> DataTypes.Lock -> DataTypes.Port -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(LS(S)S(S)S(S)LLL),1*U(U(U),1*U(U),1*U(U),1*U(U),U(U),U(U),U(U))><S(S(S)),1*U(1*U(U))><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.processDisconnect1
                  `cast`
                (<DataTypes.Node>_R
                 ->_R <DataTypes.Lock>_R
                 ->_R <DataTypes.Port>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f0e27ea64a3daae6acb5dbb847f40357
  processDisconnect1 ::
    DataTypes.Node
    -> DataTypes.Lock
    -> DataTypes.Port
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(LS(S)S(S)S(S)LLL),1*U(U(U),1*U(U),1*U(U),1*U(U),U(U),U(U),U(U))><S(S(S)),1*U(1*U(U))><L,U(U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: DataTypes.Node)
                   (w1 :: DataTypes.Lock)
                   (w2 :: DataTypes.Port)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { DataTypes.Node ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww2
                        `cast`
                      (GHC.IORef.N:IORef[0] <[DataTypes.Port]>_N) of ww8 { GHC.STRef.STRef ww9 ->
                 case ww3
                        `cast`
                      (GHC.IORef.N:IORef[0] <[DataTypes.Port]>_N) of ww10 { GHC.STRef.STRef ww11 ->
                 case ww4
                        `cast`
                      (GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                               DataTypes.Port
                                               (GHC.Types.IO
                                                  GHC.IO.Handle.Types.Handle)>_N) of ww12 { GHC.STRef.STRef ww13 ->
                 case w1 of ww14 { DataTypes.MVarLock ww15 ->
                 case ww15 of ww16 { GHC.MVar.MVar ww17 ->
                 NetworkFunctions.$wprocessDisconnect
                   ww1
                   ww9
                   ww11
                   ww13
                   ww5
                   ww6
                   ww7
                   ww17
                   w2
                   w3 } } } } } }) -}
3f7e0f718c8b071066a007aea1507d17
  processDisconnect2 :: GHC.Types.Bool
  {- Unfolding: (GHC.Base.eqString
                   NetworkFunctions.processDisconnect3
                   DataTypes.interlocked3) -}
f43208c4ed5d2f69b638eba925cb0dc8
  processDisconnect3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   NetworkFunctions.processDisconnect4) -}
c5e67dc19e80be430c4ad997088002df
  processDisconnect4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lock"#) -}
f7fb7cdafa09e327aa02f97b62323dac
  processDisconnect5 :: GHC.Types.Bool
  {- Unfolding: (GHC.Base.eqString
                   NetworkFunctions.processDisconnect3
                   DataTypes.interlocked5) -}
b7cd22d76fd7f243bf54e13c686f6849
  processDisconnect6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   NetworkFunctions.processDisconnect7) -}
4164d2782d3c6081390aa893d7d78fea
  processDisconnect7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unlock"#) -}
c21defb26f3268e34bf7fc0964f7149d
  processDist ::
    DataTypes.Node
    -> DataTypes.Lock
    -> DataTypes.Port
    -> [GHC.Base.String]
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(S(S)LS(S)LLLS(S)),1*U(1*U(U),A,1*U(U),1*U(U),U(U),U(U),1*U(U))><S(S(S)),1*U(1*U(U))><L,1*U(U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.processDist1
                  `cast`
                (<DataTypes.Node>_R
                 ->_R <DataTypes.Lock>_R
                 ->_R <DataTypes.Port>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
302f7f4e99e5cc216927764797f5991a
  processDist1 ::
    DataTypes.Node
    -> DataTypes.Lock
    -> DataTypes.Port
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(S(S)LS(S)LLLS(S)),1*U(1*U(U),A,1*U(U),1*U(U),U(U),U(U),1*U(U))><S(S(S)),1*U(1*U(U))><L,1*U(U)><S,1*U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: DataTypes.Node)
                   (w1 :: DataTypes.Lock)
                   (w2 :: DataTypes.Port)
                   (w3 :: [GHC.Base.String])
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { DataTypes.Node ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww1 of ww8 { GHC.Types.I# ww9 ->
                 case ww3
                        `cast`
                      (GHC.IORef.N:IORef[0] <[DataTypes.Port]>_N) of ww10 { GHC.STRef.STRef ww11 ->
                 case ww7
                        `cast`
                      (GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                               (DataTypes.Port, DataTypes.Port)
                                               GHC.Types.Int>_N) of ww12 { GHC.STRef.STRef ww13 ->
                 case w1 of ww14 { DataTypes.MVarLock ww15 ->
                 case ww15 of ww16 { GHC.MVar.MVar ww17 ->
                 NetworkFunctions.$wprocessDist
                   ww9
                   ww11
                   ww4
                   ww5
                   ww6
                   ww13
                   ww17
                   w2
                   w3
                   w4 } } } } } }) -}
fbab43bed17b9d56249529d86b734d74
  processMessage ::
    DataTypes.Node
    -> DataTypes.Lock
    -> GHC.Base.String
    -> DataTypes.Port
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <S(S(S)LLLLLL),1*U(1*U(U),A,A,1*U(U),1*U(U),A,A)><S(S(S)),1*U(1*U(U))><L,1*U><S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.processMessage1
                  `cast`
                (<DataTypes.Node>_R
                 ->_R <DataTypes.Lock>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <DataTypes.Port>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
02324886bd36dc9583d9cb486d7d1fcb
  processMessage1 ::
    DataTypes.Node
    -> DataTypes.Lock
    -> GHC.Base.String
    -> DataTypes.Port
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S(S(S)LLLLLL),1*U(1*U(U),A,A,1*U(U),1*U(U),A,A)><S(S(S)),1*U(1*U(U))><L,1*U><S(S),1*U(U)><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: DataTypes.Node)
                   (w1 :: DataTypes.Lock)
                   (w2 :: GHC.Base.String)
                   (w3 :: DataTypes.Port)
                   (w4 :: GHC.Base.String)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { DataTypes.Node ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww1 of ww8 { GHC.Types.I# ww9 ->
                 case w1 of ww10 { DataTypes.MVarLock ww11 ->
                 case ww11 of ww12 { GHC.MVar.MVar ww13 ->
                 case w3 of ww14 { GHC.Types.I# ww15 ->
                 NetworkFunctions.$wprocessMessage
                   ww9
                   ww4
                   ww5
                   ww13
                   w2
                   ww15
                   w4
                   w5 } } } } }) -}
266438948845789aec646427693f9d0c
  processRepair ::
    DataTypes.Node
    -> DataTypes.Lock -> DataTypes.Port -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(LS(S)S(S)S(S)LLL),1*U(U(U),1*U(U),1*U(U),1*U(U),A,U(U),U(U))><S(S(S)),1*U(1*U(U))><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.processRepair1
                  `cast`
                (<DataTypes.Node>_R
                 ->_R <DataTypes.Lock>_R
                 ->_R <DataTypes.Port>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
27dbe7973bceb979855e4e8799b68398
  processRepair1 ::
    DataTypes.Node
    -> DataTypes.Lock
    -> DataTypes.Port
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(LS(S)S(S)S(S)LLL),1*U(U(U),1*U(U),1*U(U),1*U(U),A,U(U),U(U))><S(S(S)),1*U(1*U(U))><L,U(U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: DataTypes.Node)
                   (w1 :: DataTypes.Lock)
                   (w2 :: DataTypes.Port)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { DataTypes.Node ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww2
                        `cast`
                      (GHC.IORef.N:IORef[0] <[DataTypes.Port]>_N) of ww8 { GHC.STRef.STRef ww9 ->
                 case ww3
                        `cast`
                      (GHC.IORef.N:IORef[0] <[DataTypes.Port]>_N) of ww10 { GHC.STRef.STRef ww11 ->
                 case ww4
                        `cast`
                      (GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                               DataTypes.Port
                                               (GHC.Types.IO
                                                  GHC.IO.Handle.Types.Handle)>_N) of ww12 { GHC.STRef.STRef ww13 ->
                 case w1 of ww14 { DataTypes.MVarLock ww15 ->
                 case ww15 of ww16 { GHC.MVar.MVar ww17 ->
                 NetworkFunctions.$wprocessRepair
                   ww1
                   ww9
                   ww11
                   ww13
                   ww6
                   ww7
                   ww17
                   w2
                   w3 } } } } } }) -}
b2c7cfb53a69ff26a5f453b66926f15c
  readCommandLineArguments ::
    GHC.Types.IO (GHC.Types.Int, [GHC.Types.Int])
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.readCommandLineArguments1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <(GHC.Types.Int, [GHC.Types.Int])>_R)) -}
8e3ab32ee22e9cfb5f1dbf932e33b959
  readCommandLineArguments1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Int, [GHC.Types.Int]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> case NetworkFunctions.readCommandLineArguments3
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                (GHC.Types.Int, [GHC.Types.Int]) #)
                      of {}
                   : me neighbours
                   -> (# ipv,
                         (case Text.Read.readEither8
                                 @ GHC.Types.Int
                                 (Text.ParserCombinators.ReadP.run
                                    @ GHC.Types.Int
                                    NetworkFunctions.parseMessage3
                                    me) of wild1 {
                            [] -> NetworkFunctions.parseMessage2
                            : x ds
                            -> case ds of wild2 {
                                 [] -> x : ipv2 ipv3 -> NetworkFunctions.parseMessage1 } },
                          GHC.Base.map
                            @ [GHC.Types.Char]
                            @ GHC.Types.Int
                            NetworkFunctions.readCommandLineArguments2
                            neighbours) #) } }) -}
e8aa05aa59b84cdf992b9e200ad78f31
  readCommandLineArguments2 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           NetworkFunctions.parseMessage3
                           s) of wild {
                   [] -> NetworkFunctions.parseMessage2
                   : x ds
                   -> case ds of wild1 {
                        [] -> x : ipv ipv1 -> NetworkFunctions.parseMessage1 } }) -}
6849acb5986287d14e933f6aec44bf5e
  readCommandLineArguments3 ::
    GHC.Types.IO (GHC.Types.Int, [GHC.Types.Int])
  {- Strictness: x -}
3cca33e4cf1159bf508eba54a09a9262
  recompute :: DataTypes.Node -> DataTypes.Port -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(S(S)LLLLLL),1*U(1*U(U),A,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                NetworkFunctions.recompute1
                  `cast`
                (<DataTypes.Node>_R
                 ->_R <DataTypes.Port>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
18ef2712fc56ca62e34fd1aee1ad72b3
  recompute1 ::
    DataTypes.Node
    -> DataTypes.Port
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(S(S)LLLLLL),1*U(1*U(U),A,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S(S),1*U(U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: DataTypes.Node)
                   (w1 :: DataTypes.Port)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { DataTypes.Node ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww1 of ww8 { GHC.Types.I# ww9 ->
                 case w1 of ww10 { GHC.Types.I# ww11 ->
                 NetworkFunctions.$wrecompute
                   ww9
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww11
                   w2 } } }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

